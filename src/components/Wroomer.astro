---
type Props = {
  title: string
  class?: string
}

const { title, class: className, ...rest } = Astro.props
---

<div class:list={[className]} {...rest}>
  {
    title.split(" ").map((word) => {
      return <div class="word">
        {
          Array.from(word).map((letter, idx) => {
            return <span class="riser">
              {letter}
            </span>
          })
        }
      </div>
    })
  }
</div>

<script>
  const spans = [...document.querySelectorAll(".word span")] as HTMLElement[]
  spans.forEach((span, idx) => {
    span.style.setProperty("--idx", `${idx}`)
  })

  spans[spans.length - 1].addEventListener("animationend", () => {
      setTimeout(() => {
        for(const span of spans) {
          span.classList.remove("riser")
          void span.offsetWidth
          span.classList.add("riser")
        }
      }, 10000 + (Math.random() * 10000))
    })
</script>

<style>
  .word {
    text-wrap: nowrap;
    line-height: 0.85;
  }

	.riser {

		--duration: 2000ms;
		--delay: calc(var(--duration) / 20);

    will-change: transform;
		display: inline-block;
		animation-name: rise;
		animation-duration: var(--duration);
		animation-iteration-count: 1;
		animation-timing-function: ease;
		animation-delay: calc(3s + var(--idx, 0) * var(--delay));
		
		transform: scale(1) translate(0, 0);
		text-shadow: 0px 0px 0px var(--shadow-color);
		color: var(--dark);
	}

	@keyframes rise {
		30% {
			transform: scale(1.1) translate(0, -10px);
			text-shadow: 0px 0.5rem 10px var(--shadow-color);
			color: var(--pink);
		}
	}
</style>