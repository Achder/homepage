---
type Props = {
  title: string
  class?: string
}

const { title, class: className, ...rest } = Astro.props
---

<div class:list={[className]} {...rest}>
  {
    title.split(" ").map((word) => {
      return <div class="word">
        {
          Array.from(word).map((letter, idx) => {
            const delay = `--delay-idx:${idx};`
            return <span class="riser" style={delay}>
              {letter}
            </span>
          })
        }
      </div>
    })
  }
</div>

<script>
  const spans = [...document.querySelectorAll(".word span")] as HTMLElement[]
  spans.forEach((span, idx) => {
    span.style.setProperty("--delay-idx", `${idx}`)
  })
</script>

<style>
  .word {
    text-wrap: nowrap;
  }

	.riser {
		display: inline-block;
		animation-name: rise;
		animation-duration: var(--duration);
		animation-iteration-count: 1;
		animation-timing-function: var(--ease-out-back);
		animation-delay: calc(0s + var(--delay-idx, 0) * var(--delay));
		
		transform: scale(var(--final-scale)) translateY(calc(-1 * var(--final-offset)));
		text-shadow: var(--final-shadow);
		color: var(--dark);
	}

	@keyframes rise {
		30% {
			transform: scale(var(--max-scale)) translateY(calc(-1 * var(--max-offset)));
			text-shadow: var(--max-shadow);
			color: deeppink;
		}
	}
</style>