---
import Slider from '../components/Slider.astro'
import Input from '../components/Input.astro'
import SvgPlayground from '../layouts/SvgPlayground.astro'
---

<SvgPlayground
    pageDescription="SVG sketching tool for generating downloadable abstract SVG forms"
    heading="Squaddle"
>
    <Fragment slot="controls">
        <Slider
            id="stride"
            min={0.1}
            max={6}
            value={6}
            name="Stride"
            step={0.01}
        />
        <Slider id="rotation" min={0} max={720} value={0} name="Rotation" />

        <Slider
            id="amplitude"
            min={-500}
            max={500}
            value={250}
            name="Amplitude"
        />
        <Slider
            id="amplitude-freq"
            min={1}
            max={10}
            value={2}
            step={0.1}
            name="Amplitude Frequency"
        />

        <Slider id="radius-x" min={5} max={300} value={220} name="Radius X" />
        <Slider id="radius-y" min={5} max={300} value={220} name="Radius Y" />
        <Slider
            id="radius-wobble"
            min={-100}
            max={100}
            value={0}
            name="Radius Wobble"
        />
        <Slider
            id="radius-freq"
            min={1}
            max={10}
            value={1}
            step={0.1}
            name="Radius Frequency"
        />

        <Slider
            id="stroke-width"
            min={0}
            max={10}
            step={0.1}
            value={1}
            name="Stroke Width"
        />

        <div
            class="grid grid-cols-2 md:grid-cols-2 sm:grid-cols-4 gap-4 sm:col-start-1 sm:col-end-3 md:col-end-1"
        >
            <Input
                type="color"
                id="fill-start"
                label="Fill Start"
                value="#6366f1"
            />
            <Input
                type="color"
                id="fill-end"
                label="Fill end"
                value="#ef4444"
            />
            <Input
                type="color"
                id="stroke-start"
                label="Stroke Start"
                value="#000000"
            />
            <Input
                type="color"
                id="stroke-end"
                label="Stroke End"
                value="#ffffff"
            />
        </div>
    </Fragment>
</SvgPlayground>

<script>
    import { initInteractiveSvg, type Size, clear } from '../svg/svg'
    import lerp from '@sunify/lerp-color'
    import { drawEllipse } from '../svg/ellipse'
    import { connect as connectControl, get } from '../utils/controls'

    const init = (svg: HTMLElement, size: Size) => {
        const connect = (id: string) => {
            connectControl(id, () => render())
        }

        connect('stride')
        connect('amplitude')
        connect('amplitude-freq')
        connect('radius-x')
        connect('radius-y')
        connect('radius-wobble')
        connect('radius-freq')
        connect('fill-start')
        connect('fill-end')
        connect('stroke-start')
        connect('stroke-end')
        connect('stroke-width')
        connect('rotation')

        const render = () => {
            clear(svg)

            const radiusX = get<number>('radius-x')
            const radiusY = get<number>('radius-y')
            const rotation = get<number>('rotation')
            const radiusWobble = get<number>('radius-wobble')
            const radiusFreq = get<number>('radius-freq')
            const stride = get<number>('stride')
            const amplitude = get<number>('amplitude')
            const amplitudeFreq = get<number>('amplitude-freq')
            const fillStart = get<string>('fill-start')
            const fillEnd = get<string>('fill-end')
            const strokeWidth = get<number>('stroke-width')
            const strokeStart = get<string>('stroke-start')
            const strokeEnd = get<string>('stroke-end')

            const steps = (size.h + 2 * radiusY) / stride
            const center = { x: size.w / 2, y: -radiusY }

            for (let i = 0; i < steps; i++) {
                const t = i / steps
                const pi_t = t * Math.PI * 2
                const fill = lerp(fillStart, fillEnd, t)
                const stroke = lerp(strokeStart, strokeEnd, t)

                drawEllipse(svg, {
                    x: center.x + Math.sin(pi_t * amplitudeFreq) * amplitude,
                    y: center.y,
                    radiusX:
                        radiusX + Math.sin(pi_t * radiusFreq) * radiusWobble,
                    radiusY:
                        radiusY + Math.sin(pi_t * radiusFreq) * radiusWobble,
                    fill: fill ?? '',
                    stroke: stroke ?? '',
                    strokeWidth: strokeWidth,
                    rotation: (t - 0.5) * rotation,
                })

                center.y += stride
            }
        }

        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
