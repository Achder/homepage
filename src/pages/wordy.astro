---
import Slider from '../components/Slider.astro'
import Input from '../components/Input.astro'
import Select from '../components/Select.astro'
import SvgPlayground from '../layouts/SvgPlayground.astro'
import ControlSection from '../components/ControlSection.astro'
import { Font } from 'astro:assets'
---

<SvgPlayground pageDescription="An SVG tool for generating downloadable abstract SVG forms" heading="Wordy">
    <Fragment slot="head">
        <Font cssVariable="--font-rowdies" preload />
        <Font cssVariable="--font-cal-sans" preload />
        <Font cssVariable="--font-pacifico" preload />
        <Font cssVariable="--font-caveat" preload />
        <Font cssVariable="--font-bebas-neue" preload />
    </Fragment>

    <Fragment slot="controls">
        <ControlSection>
            <Input type="text" id="text" label="Text" value="Hello" />
            <Select id="font" label="Font">
                <option value="--font-cal-sans" selected>Cal Sans</option>
                <option value="--font-bebas-neue">Bebas Neue</option>
                <option value="--font-pacifico">Pacifico</option>
                <option value="--font-caveat">Caveat</option>
                <option value="--font-rowdies">Rowdies</option>
            </Select>
            <Slider id="font-size" min={5} max={100} value={27} reset={20} step={0.01} name="Font Size" />
            <Slider id="font-scale" min={-1} max={1} value={0.2} step={0.01} reset={0} name="Font Scale" />
        </ControlSection>

        <ControlSection>
            <Slider id="shapes" min={2} max={300} value={25} reset={50} name="Shapes" />
            <Slider id="rotation" min={-720} max={720} value={40} reset={0} name="Rotation" />
        </ControlSection>

        <ControlSection class="grid-cols-2">
            <Slider id="x-stride" min={-10} max={10} value={0.6} reset={0} name="x - Stride" step={0.01} />
            <Slider id="y-stride" min={-10} max={10} value={2.16} reset={0} name="y - Stride" step={0.01} />
            <Slider id="x-amplitude" min={-100} max={100} value={6} reset={0} name="x - Amplitude" />
            <Slider id="y-amplitude" min={-500} max={500} value={6} reset={0} name="y - Amplitude" />
            <Slider id="x-wobble-freq" min={0.5} max={3} value={1.4} step={0.01} reset={0.5} name="x - Frequency" />
            <Slider id="y-wobble-freq" min={0.5} max={3} value={0} step={0.01} reset={0.5} name="y - Frequency" />
            <Slider id="x-wobble-phase" min={0} max={Math.PI * 2} value={0} step={0.01} name="x - Phase" />
            <Slider id="y-wobble-phase" min={0} max={Math.PI * 2} value={0} step={0.01} name="y - Phase" />
            <Slider id="wobble" min={0} max={1} value={0} step={0.01} reset={0} name="Wobble" class="col-span-2" />
        </ControlSection>

        <ControlSection>
            <div class="grid grid-cols-3 gap-4">
                <Input type="color" id="fill-start" label="Fill Start" value="#ff00c8" />
                <Input type="color" id="fill-mid" label="Fill Mid" value="#ff0000" />
                <Input type="color" id="fill-end" label="Fill End" value="#000000" />
            </div>
            <Slider id="fill-alpha" min={0} max={1} step={0.01} value={1} reset={1} name="Fill Alpha" />
            <Slider id="fill-alpha-scale" min={-1} max={1} step={0.01} value={0} reset={0} name="Fill Alpha Scale" />
        </ControlSection>

        <ControlSection>
            <div class="grid grid-cols-3 gap-4">
                <Input type="color" id="stroke-start" label="Stroke Start" value="#ff0000" />
                <Input type="color" id="stroke-mid" label="Stroke Mid" value="#00ff59" />
                <Input type="color" id="stroke-end" label="Stroke End" value="#eeff00" />
            </div>

            <Slider id="stroke-width" min={0} max={20} step={0.1} value={4} reset={1} name="Stroke Width" />
            <Slider id="stroke-alpha" min={0} max={1} step={0.01} value={0.75} reset={1} name="Stroke Alpha" />
            <Slider
                id="stroke-alpha-scale"
                min={-1}
                max={1}
                step={0.01}
                value={0}
                reset={0}
                name="Stroke Alpha Scale"
            />
        </ControlSection>

        <ControlSection>
            <Slider id="bg-angle" min={0} max={360} value={360} name="Bg Angle" />
            <div class="grid grid-cols-2 md:grid-cols-2 sm:grid-cols-4 gap-4 sm:col-start-1 sm:col-end-3 md:col-end-1">
                <Input type="color" id="bg-start" label="Bg Start" value="#240042" />
                <Input type="color" id="bg-end" label="Bg End" value="#380000" />
            </div>
        </ControlSection>
    </Fragment>
</SvgPlayground>

<script>
    import { initInteractiveSvg, type Size, clear } from '../svg/svg'
    import { getInputValue } from '../utils/controls'
    import { drawRect } from '../svg/rect'
    import { createGradient } from '../svg/gradient'
    import Color from 'colorjs.io'
    import { mix, toProofed } from '../utils/color'
    import { drawText } from '../svg/text'
    import { seesaw } from '../utils/form'

    const init = (svg: HTMLElement, size: Size) => {
        function get<T>(id: string) {
            return getInputValue<T>(id, () => requestAnimationFrame(render))
        }

        const render = () => {
            clear(svg)

            const text = get<string>('text')
            const font = get<string>('font')
            const fontSize = get<number>('font-size')
            const fontScale = get<number>('font-scale')

            const rotation = get<number>('rotation')
            const shapes = get<number>('shapes')
            const xStride = get<number>('x-stride')
            const yStride = get<number>('y-stride')

            const xAmplitude = get<number>('x-amplitude')
            const xWobbleFreq = get<number>('x-wobble-freq')
            const xWobblePhase = get<number>('x-wobble-phase')
            const yAmplitude = get<number>('y-amplitude')
            const yWobbleFreq = get<number>('y-wobble-freq')
            const yWobblePhase = get<number>('y-wobble-phase')
            const wobble = get<number>('wobble')

            const fillStart = get<Color>('fill-start')
            const fillMid = get<Color>('fill-mid')
            const fillEnd = get<Color>('fill-end')
            const fillAlpha = get<number>('fill-alpha')
            const fillAlphaScale = get<number>('fill-alpha-scale')

            const strokeWidth = get<number>('stroke-width')
            const strokeStart = get<Color>('stroke-start')
            const strokeMid = get<Color>('stroke-mid')
            const strokeEnd = get<Color>('stroke-end')
            const strokeAlpha = get<number>('stroke-alpha')
            const strokeAlphaScale = get<number>('stroke-alpha-scale')

            const colorSpace = get<string>('color-space')
            const proof = get<string>('proof')
            const shouldProof = proof === 'proof'

            const bgAngle = get<number>('bg-angle')
            const bgStart = get<Color>('bg-start')
            const bgEnd = get<Color>('bg-end')

            const center = { x: size.w / 2, y: size.h / 2 }

            createGradient(svg, {
                id: 'bg-gradient',
                start: (shouldProof ? toProofed(bgStart) : bgStart.to('srgb')).toString({ format: 'hex' }),
                end: (shouldProof ? toProofed(bgEnd) : bgEnd.to('srgb')).toString({ format: 'hex' }),
                angle: bgAngle,
            })

            drawRect(svg, {
                x: 0,
                y: 0,
                width: size.w,
                height: size.h,
                fill: 'url(#bg-gradient)',
            })

            for (let i = 0; i <= shapes; i++) {
                const t = i / shapes
                const nt = (t - 0.5) * 2
                const pi_nt = nt * Math.PI * 2

                const fill = mix(fillStart, fillMid, fillEnd, t, colorSpace, 'srgb')
                const proofedFill = toProofed(fill)

                const stroke = mix(strokeStart, strokeMid, strokeEnd, t, colorSpace, 'srgb')
                const proofedStroke = toProofed(stroke)

                const xSineOffset = Math.sin(pi_nt * xWobbleFreq + xWobblePhase) * xAmplitude
                const ySineOffset = Math.sin(pi_nt * yWobbleFreq + yWobblePhase) * yAmplitude
                const xLinearOffset = nt * xAmplitude
                const yLinearOffset = nt * yAmplitude
                const xOffset = (i - shapes / 2) * xStride + xLinearOffset + (xSineOffset - xLinearOffset) * wobble
                const yOffset = (i - shapes / 2) * yStride + yLinearOffset + (ySineOffset - yLinearOffset) * wobble

                drawText(svg, {
                    content: text,
                    x: center.x + xOffset,
                    y: center.y + yOffset,
                    fill: (shouldProof ? proofedFill : fill).toString({ format: 'hex' }),
                    fillOpacity: fillAlpha * seesaw(fillAlphaScale, t),
                    stroke: (shouldProof ? proofedStroke : stroke).toString({ format: 'hex' }),
                    strokeOpacity: strokeAlpha * seesaw(strokeAlphaScale, t),
                    strokeWidth: strokeWidth,
                    rotation: (nt - 0.5) * rotation,
                    fontFamily: `var(${font})`,
                    fontSize: `${fontSize * seesaw(fontScale, t) * 16}px`,
                    fontWeight: '900',
                })
            }
        }

        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
