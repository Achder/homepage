---
import SvgPlayground from '../layouts/SvgPlayground.astro'
import Slider from '../components/Slider.astro'
import Input from '../components/Input.astro'
import Button from '../components/Button.astro'
import Select from '../components/Select.astro'
---

<SvgPlayground pageDescription="An SVG tool for generating downloadable abstract SVG forms" heading="Metaballs">
    <Fragment slot="controls">
        <Slider id="min-threshold" min={-0.5} max={0.5} value={-0.076} step={0.001} name="Min Threshold" />
        <Slider id="max-threshold" min={-0.5} max={0.5} value={0.06} step={0.001} name="Max Threshold" />
        <Slider id="resolution" min={4} max={20} value={20} name="Resolution" />
        <Slider id="iso-levels" min={4} max={22} value={52} name="Iso Levels" />
        <Slider id="stroke-width" min={0} max={10} step={0.1} value={2.2} name="Stroke Width" />

        <div class="grid grid-cols-3 md:grid-cols-3 sm:grid-cols-4 gap-4 sm:col-start-1 sm:col-end-3 md:col-end-1">
            <Input type="color" id="fill-start" label="Fill Start" value="#23ffea" />
            <Input type="color" id="fill-mid" label="Fill Mid" value="#23bb00" />
            <Input type="color" id="fill-end" label="Fill End" value="#230000" />
            <Input type="color" id="stroke-start" label="Stroke Start" value="#23fff7" />
            <Input type="color" id="stroke-mid" label="Stroke Mid" value="#23b800" />
            <Input type="color" id="stroke-end" label="Stroke End" value="#230000" />

            <Select id="color-space" label="Color Space" class="col-span-3">
                <option value="lch" selected>LCH</option>
                <option value="acescc">ACEScc</option>
                <option value="a98rgb">Adobe 98 RGB</option>
                <option value="hpluv">HPLuv</option>
                <option value="hsl">HSL</option>
                <option value="hsluv">HSLuv</option>
                <option value="hwb">HWB</option>
                <option value="ictcp">ICTCQ</option>
                <option value="jzczhz">JzCzHz</option>
                <option value="lab">LAB</option>
                <option value="oklch">Oklch</option>
                <option value="p3">P3</option>
                <option value="prophoto">ProPhoto</option>
                <option value="rec2020">REC.2020</option>
                <option value="rec2100hlg">REC.2100-HLG</option>
                <option value="rec2100pq">REC.2100-PQ</option>
            </Select>
        </div>

        <div class="grid grid-cols-2 gap-4">
            <Button id="remove">-</Button>
            <Button id="add">+</Button>
        </div>
    </Fragment>
</SvgPlayground>

<script>
    import { isoBands } from 'marching-squares'
    import { drawPath } from '../svg/path'
    import { clear, initInteractiveSvg, type Size } from '../svg/svg'
    import { connect as connectControl, get, writeToUrl, readFromUrl } from '../utils/controls'
    import isMobile from 'is-mobile'
    import { drawCircle } from '../svg/circle'
    import Color from 'colorjs.io'
    import { mix } from '../utils/color'

    type Circle = {
        x: number
        y: number
        radius: number
    }

    function metaball(x: number, y: number, ball: Circle) {
        const dx = x - ball.x
        const dy = y - ball.y
        const distanceSquared = dx * dx + dy * dy
        return ball.radius / distanceSquared
    }

    type FieldParams = {
        size: Size
        balls: Circle[]
        gridSize: number
    }

    function generateField(params: FieldParams) {
        const { size, balls, gridSize } = params

        const field: number[][] = []
        for (let y = 0; y <= size.h + gridSize; y += gridSize) {
            const line: number[] = []
            for (let x = 0; x <= size.w + gridSize; x += gridSize) {
                let sum = 0
                for (const ball of balls) {
                    sum += metaball(x, y, ball)
                }
                line.push(sum)
            }

            field.push(line)
        }

        return field
    }

    function scaleRing(ring: number[][], scaleBy: number): number[][] {
        return ring.map((point) => point.map((value) => value * scaleBy))
    }

    function smoothRing(ring: number[][]): number[][] {
        const smoothRing: number[][] = []

        const dx = (p1: number[], p2: number[]) => {
            return p2[0] - p1[0]
        }

        const dy = (p1: number[], p2: number[]) => {
            return p2[1] - p1[1]
        }

        const smoothPoint = (p1: number[], p2: number[]) => {
            return [p1[0] + dx(p1, p2) / 2, p1[1] + dy(p1, p2) / 2]
        }

        for (let idx = -1; idx < ring.length; idx++) {
            const prev = ring.at(idx - 1)
            const p = ring.at(idx)
            const next = ring.at(idx + 1)

            if (!prev || !next || !p) {
                continue
            }

            const d = smoothPoint(prev, next)
            smoothRing.push(smoothPoint(p, d))
        }

        return smoothRing
    }

    function generatePath(ring: number[][]) {
        let d = ''

        for (let idx = 0; idx < ring.length; idx++) {
            const point = ring[idx]

            if (idx === 0) {
                d += `M ${point[0]} ${point[1]} `
            } else {
                d += `L ${point[0]} ${point[1]} `
            }
        }

        d += `Z`

        return d
    }

    function generateThresholds(min: number, max: number, num: number) {
        const bandwidth = (max - min) / num

        // first and last bandwidth need to be big to catch outliers
        const thresholds: number[] = [min - 10]
        const bandwidths: number[] = [10]

        for (let idx = 0; idx < num; idx++) {
            thresholds.push(min + bandwidth * idx)
            bandwidths.push(bandwidth)
        }

        thresholds.push(min + num * bandwidth)
        bandwidths.push(10)

        return { thresholds, bandwidths }
    }

    function generateRandomBall(size: Size) {
        const genRadius = (min: number, max: number) => {
            const rr = (Math.random() - 0.2) * (1 / 0.8)
            return Math.sign(rr) * min + rr * max
        }

        return {
            x: Math.random() * size.w,
            y: Math.random() * size.h,
            radius: isMobile() ? genRadius(200, 700) : genRadius(400, 2000),
        }
    }

    function removeBall() {
        const balls = getBallElements()
        if (balls.length <= 1) {
            return
        }

        const lastBall = balls.pop()
        lastBall?.remove()
        writeBallsToUrl()
    }

    function addBallResizeHandle(ballElement: HTMLElement, onMoveCallback: () => void, onUpCallback: () => void) {
        const resizeHandle = document.createElement('div') as HTMLDivElement
        resizeHandle.classList.add(
            'bg-fuchsia-600/30',
            'resize-handle',
            'absolute',
            'right-0',
            'top-0',
            'h-4',
            'w-4',
            'cursor-se-resize'
        )
        resizeHandle.style.transform = `translate(100%, -100%)`

        ballElement.appendChild(resizeHandle)

        resizeHandle.addEventListener('pointerdown', (e) => {
            e.stopPropagation()
            let initialX = e.clientX
            const oldRadius = Number(ballElement.dataset.radius)

            function handleMove(e: PointerEvent) {
                const distX = e.clientX - initialX
                ballElement.setAttribute('data-radius', (oldRadius + distX * 3).toString())
                onMoveCallback()
            }

            function handleUp(e: PointerEvent) {
                document.removeEventListener('pointermove', handleMove)
                document.removeEventListener('pointerup', handleUp)
                onUpCallback()
            }

            document.addEventListener('pointermove', handleMove)
            document.addEventListener('pointerup', handleUp)
        })
    }

    function addBall(container: HTMLElement, ball: Circle, onMoveCallback: () => void, onUpCallback: () => void) {
        const { x, y, radius } = ball

        const ballElement = document.createElement('div')
        ballElement.setAttribute('data-radius', radius.toString())
        ballElement.classList.add(
            'ball',
            'rounded-full',
            'h-12',
            'w-12',
            'absolute',
            'translate-x-[-50%]',
            'translate-y-[-50%]',
            'bg-fuchsia-600/30',
            'hover:bg-fuchsia-600',
            'touch-none',
            'select-none',
            'outline',
            'outline-2',
            'outline-transparent',
            'active:outline-fuchsia-600',
            'active:outline-offset-4'
        )
        ballElement.style.left = `${x}px`
        ballElement.style.top = `${y}px`

        ballElement.addEventListener('pointerdown', (e) => {
            let offsetX = e.clientX - ballElement.offsetLeft
            let offsetY = e.clientY - ballElement.offsetTop

            function handleMove(e: PointerEvent) {
                let newLeft = e.clientX - offsetX
                let newTop = e.clientY - offsetY

                ballElement.style.left = newLeft + 'px'
                ballElement.style.top = newTop + 'px'

                onMoveCallback()
            }

            function handleUp() {
                document.removeEventListener('pointermove', handleMove)
                document.removeEventListener('pointerup', handleUp)
                onUpCallback()
            }

            document.addEventListener('pointermove', handleMove)
            document.addEventListener('pointerup', handleUp)
        })

        addBallResizeHandle(ballElement, onMoveCallback, onUpCallback)
        container.appendChild(ballElement)
    }

    function addBalls(container: HTMLElement, size: Size, onMoveCallback: () => void, onUpCallback: () => void) {
        document.querySelectorAll('.ball').forEach((el) => {
            el.remove()
        })

        const ballsSearchParam = readFromUrl('balls')
        const balls: Circle[] = ballsSearchParam ? (JSON.parse(ballsSearchParam) as Circle[]) : []

        // init randomly if no balls are provided in the URL query string
        if (!ballsSearchParam) {
            const numBalls = isMobile() ? 10 : 15
            for (let idx = 0; idx < numBalls; idx++) {
                balls.push(generateRandomBall(size))
            }
        }

        for (const ball of balls) {
            addBall(container, ball, onMoveCallback, onUpCallback)
        }

        writeBallsToUrl()
    }

    function getBallElements() {
        return [...document.querySelectorAll('.ball')] as HTMLElement[]
    }

    function getBalls() {
        const ballElements = getBallElements()
        return ballElements.map((el) => ({
            x: el.offsetLeft,
            y: el.offsetTop,
            radius: Number(el.dataset.radius),
        }))
    }

    function writeBallsToUrl() {
        const balls = getBalls()
        writeToUrl('balls', JSON.stringify(balls))
    }

    const init = (svg: HTMLElement, size: Size, abortSignal?: AbortSignal) => {
        const connect = (id: string) => {
            connectControl(id, () => render(), abortSignal)
        }

        connect('min-threshold')
        connect('max-threshold')
        connect('resolution')
        connect('iso-levels')
        connect('stroke-width')

        connect('fill-start')
        connect('fill-mid')
        connect('fill-end')
        connect('stroke-start')
        connect('stroke-mid')
        connect('stroke-end')
        connect('color-space')

        const render = () => {
            clear(svg)

            const gridSize = get<number>('resolution')
            const minThreshold = get<number>('min-threshold')
            const maxThreshold = get<number>('max-threshold')
            const isoLevels = get<number>('iso-levels')
            const fillStart = get<string>('fill-start')
            const fillMid = get<string>('fill-mid')
            const fillEnd = get<string>('fill-end')
            const strokeWidth = get<number>('stroke-width')
            const strokeStart = get<string>('stroke-start')
            const strokeMid = get<string>('stroke-mid')
            const strokeEnd = get<string>('stroke-end')
            const colorSpace = get<string>('color-space')

            const balls = getBalls()
            const field = generateField({ size, balls, gridSize })

            const fs = new Color(fillStart)
            const fm = new Color(fillMid)
            const fe = new Color(fillEnd)
            const ss = new Color(strokeStart)
            const sm = new Color(strokeMid)
            const se = new Color(strokeEnd)

            const { thresholds, bandwidths } = generateThresholds(minThreshold, maxThreshold, isoLevels)
            const layers = isoBands(field, thresholds, bandwidths)

            for (let idx = 0; idx < layers.length; idx++) {
                const t = idx / layers.length
                const layer = layers[idx]

                const fill = mix(fs, fm, fe, t, colorSpace)
                const stroke = mix(ss, sm, se, t, colorSpace)

                for (const ring of layer) {
                    const scaled = scaleRing(ring, gridSize)
                    const smooth = smoothRing(scaled)
                    const d = generatePath(smooth)
                    drawPath(svg, {
                        d,
                        strokeWidth,
                        stroke: strokeWidth === 0 ? 'none' : stroke.to('srgb').toString({ format: 'hex' }),
                        fill: fill.to('srgb').toString({ format: 'hex' }),
                    })
                }
            }

            for (const { x, y, radius } of balls) {
                drawCircle(svg, {
                    x,
                    y,
                    radius: Math.abs(radius / 16),
                    fill: 'none',
                    stroke: radius > 0 ? '#00000055' : '#ffffff55',
                    strokeWidth: 1,
                })
            }
        }

        const container = document.getElementById('container') as HTMLElement
        container.classList.add('bg-gradient-to-t', 'from-cyan-500', 'to-indigo-500')

        const removeButton = document.getElementById('remove') as HTMLButtonElement
        const addButton = document.getElementById('add') as HTMLButtonElement

        removeButton.addEventListener('click', () => {
            removeBall()
            writeBallsToUrl()
            render()
        })

        addButton.addEventListener('click', () => {
            addBall(container, generateRandomBall(size), render, writeBallsToUrl)
            writeBallsToUrl()
            render()
        })

        addBalls(container, size, render, writeBallsToUrl)
        getBalls()
        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
