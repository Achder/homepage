---
import SvgPlayground from '../../layouts/SvgPlayground.astro'
import Slider from '../../components/Slider.astro'
import Input from '../../components/Input.astro'
import Button from '../../components/Button.astro'
import ControlSection from '../../components/ControlSection.astro'
---

<SvgPlayground pageDescription="An SVG tool for generating downloadable abstract SVG forms" heading="Metaballs">
    <Fragment slot="controls">
        <ControlSection>
            <Slider id="min-threshold" min={-0.5} max={0.5} value={-0.054} step={0.001} name="Min Threshold" />
            <Slider id="max-threshold" min={-0.5} max={0.5} value={0.061} step={0.001} name="Max Threshold" />
            <Slider id="resolution" min={0.005} max={0.1} value={0.0415} step={0.0001} name="Resolution" />
            <Slider id="iso-levels" min={1} max={100} value={100} name="Iso Levels" />
            <Slider id="falloff" min={1} max={100} value={18} name="Falloff" />
        </ControlSection>

        <ControlSection class="grid-cols-3">
            <Input type="color" id="fill-start" label="Fill Start" value="#ffc800" />
            <Input type="color" id="fill-mid" label="Fill Mid" value="#ff0000" />
            <Input type="color" id="fill-end" label="Fill End" value="#12001f" />
        </ControlSection>

        <ControlSection class="grid-cols-2">
            <Button id="remove">-</Button>
            <Button id="add">+</Button>
        </ControlSection>
    </Fragment>
</SvgPlayground>

<script>
    import { isoBands } from 'marching-squares'
    import { drawPath } from '../../svg/path'
    import { clear, initInteractiveSvg, type Size } from '../../svg/svg'
    import { getInputValue, writeToUrl, readFromUrl } from '../../utils/controls'
    import Color from 'colorjs.io'
    import { mix, toProofed } from '../../utils/color'

    type Circle = {
        x: number
        y: number
        radius: number
    }

    const init = (svg: HTMLElement, size: Size) => {
        function get<T>(id: string) {
            return getInputValue<T>(id, () => requestAnimationFrame(render))
        }

        // #region balls
        function getBallElements() {
            return [...document.querySelectorAll('.ball')] as HTMLElement[]
        }

        function getBalls() {
            const ballElements = getBallElements()
            return ballElements.map((el) => ({
                x: el.offsetLeft / size.w,
                y: (el.offsetTop / size.h) * 1.414,
                radius: Number(el.dataset.radius),
            }))
        }

        function writeBallsToUrl() {
            const balls = getBalls()
            writeToUrl('balls', JSON.stringify(balls))
        }

        function addBallResizeHandle(ballElement: HTMLElement, onMoveCallback: () => void, onUpCallback: () => void) {
            const resizeHandle = document.createElement('div') as HTMLDivElement
            resizeHandle.style.transform = `translate(100%, -100%)`
            resizeHandle.classList.add(
                'bg-black/30',
                'hover:bg-black',
                'resize-handle',
                'absolute',
                'right-0',
                'top-0',
                'h-4',
                'w-4',
                'rounded-lg',
                'cursor-se-resize'
            )

            ballElement.appendChild(resizeHandle)

            resizeHandle.addEventListener('pointerdown', (e) => {
                e.stopPropagation()
                let initialX = e.clientX
                const oldRadius = Number(ballElement.dataset.radius)

                function handleMove(e: PointerEvent) {
                    const distX = (e.clientX - initialX) / size.w
                    ballElement.setAttribute('data-radius', (oldRadius + distX).toString())
                    onMoveCallback()
                }

                function handleUp() {
                    document.removeEventListener('pointermove', handleMove)
                    document.removeEventListener('pointerup', handleUp)
                    onUpCallback()
                }

                document.addEventListener('pointermove', handleMove)
                document.addEventListener('pointerup', handleUp)
            })
        }

        function addBall(ball: Circle, onMoveCallback: () => void, onUpCallback: () => void) {
            const { x, y, radius } = ball

            const ballElement = document.createElement('div')
            ballElement.style.left = `${x * size.w}px`
            ballElement.style.top = `${(y * size.h) / 1.414}px`
            ballElement.setAttribute('data-radius', radius.toString())
            ballElement.classList.add(
                'ball',
                'rounded-full',
                'h-12',
                'w-12',
                'absolute',
                'translate-x-[-50%]',
                'translate-y-[-50%]',
                'bg-black/40',
                'hover:bg-black',
                'touch-none',
                'select-none',
                'outline',
                'outline-4',
                'outline-white/10',
                'hover:outline-white/30',
                'active:outline-black',
                'active:outline-offset-4'
            )

            ballElement.addEventListener('pointerdown', (e) => {
                let offsetX = e.clientX - ballElement.offsetLeft
                let offsetY = e.clientY - ballElement.offsetTop

                function handleMove(e: PointerEvent) {
                    let newLeft = e.clientX - offsetX
                    let newTop = e.clientY - offsetY

                    ballElement.style.left = newLeft + 'px'
                    ballElement.style.top = newTop + 'px'

                    onMoveCallback()
                }

                function handleUp() {
                    document.removeEventListener('pointermove', handleMove)
                    document.removeEventListener('pointerup', handleUp)
                    onUpCallback()
                }

                document.addEventListener('pointermove', handleMove)
                document.addEventListener('pointerup', handleUp)
            })

            addBallResizeHandle(ballElement, onMoveCallback, onUpCallback)

            const container = document.getElementById('container') as HTMLElement
            container.appendChild(ballElement)
        }

        function removeBall() {
            const balls = getBallElements()
            if (balls.length <= 1) {
                return
            }

            const lastBall = balls.pop()
            lastBall?.remove()
            writeBallsToUrl()
        }

        function generateRandomBall() {
            const genRadius = (min: number, max: number) => {
                const sign = Math.sign(Math.random() - 0.5)
                const radius = sign * (min + Math.random() * (max - min))
                return radius
            }

            return {
                x: Math.random(),
                y: Math.random(),
                radius: genRadius(0.1, 0.3),
            }
        }

        function addBalls(onMoveCallback: () => void, onUpCallback: () => void) {
            // remove all existing balls
            document.querySelectorAll('.ball').forEach((el) => {
                el.remove()
            })

            const ballsSearchParam = readFromUrl('balls')
            const balls: Circle[] = ballsSearchParam ? (JSON.parse(ballsSearchParam) as Circle[]) : []

            // init randomly if no balls are provided in the URL query string
            if (!ballsSearchParam) {
                balls.push({
                    x: 0.31625441696113077,
                    y: 1.2143972517176764,
                    radius: 0.7472224639448626,
                })
                balls.push({
                    x: 0.7800353356890459,
                    y: 0.8575852592129918,
                    radius: -0.9408659170687433,
                })
                balls.push({
                    x: 0.12809187279151943,
                    y: 0.06094066208619612,
                    radius: -0.09964753211457122,
                })
                balls.push({
                    x: 0.8268551236749117,
                    y: 0.34003123048094935,
                    radius: 0.5336042778399835,
                })
                balls.push({
                    x: 0.0715547703180212,
                    y: 0.7904622111180512,
                    radius: -0.09813380419584605,
                })
                balls.push({
                    x: 0.5856890459363958,
                    y: 0.8045933791380387,
                    radius: 0.23446259894957294,
                })
            }

            for (const ball of balls) {
                addBall(ball, onMoveCallback, onUpCallback)
            }

            writeBallsToUrl()
        }
        // #endregion balls

        // #region meta-field
        const metaballFunctions = {
            gaussian(x: number, y: number, ball: Circle, falloff: number) {
                const dx = x - ball.x
                const dy = y - ball.y
                const distanceSquared = dx * dx + dy * dy
                return ball.radius * Math.exp(-falloff * distanceSquared)
            },
            inverseSquared(x: number, y: number, ball: Circle, falloff: number) {
                const dx = x - ball.x
                const dy = y - ball.y
                const distanceSquared = dx * dx + dy * dy
                return ball.radius / (falloff * distanceSquared + 1)
            },
            wyvill(x: number, y: number, ball: Circle, falloff: number) {
                const dx = x - ball.x
                const dy = y - ball.y
                const distanceSquared = dx * dx + dy * dy
                const radiusSquared = ball.radius * ball.radius

                if (distanceSquared >= radiusSquared) {
                    return 0
                }

                const t = 1 - distanceSquared / radiusSquared
                return t * t * t // (1 - (d² / R²))³
            },
            quartic(x: number, y: number, ball: Circle, falloff: number) {
                const dx = x - ball.x
                const dy = y - ball.y
                const distanceSquared = dx * dx + dy * dy
                const radiusSquared = ball.radius * ball.radius

                if (distanceSquared >= radiusSquared) {
                    return 0
                }

                const t = 1 - distanceSquared / radiusSquared
                return t * t * t * t // raise to power 4
            },
        }

        function generateField(balls: Circle[], resolution: number, falloff: number) {
            const field: number[][] = []

            for (let y = 0; y <= 1.414 + resolution; y += resolution) {
                const dots: number[] = []
                for (let x = 0; x <= 1 + resolution; x += resolution) {
                    let sum = 0
                    for (const ball of balls) {
                        sum += metaballFunctions.gaussian(x, y, ball, falloff)
                    }
                    dots.push(sum)
                }

                field.push(dots)
            }

            return field
        }

        function scaleRing(ring: number[][], resolution: number): number[][] {
            const sx = size.w * resolution
            const sy = size.h * (resolution / 1.414)
            return ring.map(([x, y]) => {
                return [x * sx, y * sy]
            })
        }
        // #endregion meta-field

        // #region marching-squares
        function generateThresholds(min: number, max: number, num: number) {
            const bandwidth = (max - min) / num

            // first and last bandwidth need to be big to catch outliers
            const thresholds: number[] = [min - 10]
            const bandwidths: number[] = [10]

            for (let idx = 0; idx < num; idx++) {
                thresholds.push(min + bandwidth * idx)
                bandwidths.push(bandwidth)
            }

            thresholds.push(min + num * bandwidth)
            bandwidths.push(10)

            return { thresholds, bandwidths }
        }

        function generatePath(ring: number[][]) {
            let d = ''

            for (let idx = 0; idx < ring.length; idx++) {
                const point = ring[idx]

                if (idx === 0) {
                    d += `M ${point[0]} ${point[1]} `
                } else {
                    d += `L ${point[0]} ${point[1]} `
                }
            }

            d += `Z`

            return d
        }
        // #endregion marching-squares

        const render = () => {
            clear(svg)

            const searchParams = new URLSearchParams(window.location.search)
            for (const [key, value] of searchParams.entries()) {
                console.log(`${key}: ${value}`)
            }

            const bs = searchParams.get('balls')
            if (bs) {
                console.log(JSON.parse(decodeURIComponent(bs)))
            }
            const resolution = get<number>('resolution')
            const minThreshold = get<number>('min-threshold')
            const maxThreshold = get<number>('max-threshold')
            const isoLevels = get<number>('iso-levels')
            const falloff = get<number>('falloff')

            const fillStart = get<Color>('fill-start')
            const fillMid = get<Color>('fill-mid')
            const fillEnd = get<Color>('fill-end')

            const colorSpace = get<string>('color-space')
            const proof = get<string>('proof')
            const shouldProof = proof === 'proof'

            const balls = getBalls()
            const field = generateField(balls, resolution, falloff)

            const { thresholds, bandwidths } = generateThresholds(minThreshold, maxThreshold, isoLevels)
            const layers = isoBands(field, thresholds, bandwidths)

            for (let idx = 0; idx < layers.length; idx++) {
                const t = idx / layers.length
                const layer = layers[idx]

                const fill = mix(fillStart, fillMid, fillEnd, t, colorSpace, 'srgb')
                const proofedFill = toProofed(fill)

                for (const ring of layer) {
                    const scaled = scaleRing(ring, resolution)

                    drawPath(svg, {
                        d: generatePath(scaled),
                        stroke: 'none',
                        fill: (shouldProof ? proofedFill : fill).toString({ format: 'hex', precision: 0 }),
                    })
                }
            }

            // draw debug circles
            // for (const { x, y, radius } of balls) {
            //     drawCircle(svg, {
            //         x: x * size.w,
            //         y: (y * size.h) / 1.414,
            //         radius: Math.abs(radius) * size.w,
            //         fill: 'none',
            //         stroke: 'black',
            //         strokeWidth: 2,
            //     })
            // }
        }

        const removeButton = document.getElementById('remove') as HTMLButtonElement
        const addButton = document.getElementById('add') as HTMLButtonElement

        removeButton.addEventListener('click', () => {
            removeBall()
            writeBallsToUrl()
            render()
        })

        addButton.addEventListener('click', () => {
            addBall(generateRandomBall(), render, writeBallsToUrl)
            writeBallsToUrl()
            render()
        })

        addBalls(render, writeBallsToUrl)
        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
