---
import Slider from '../../components/Slider.astro'
import Input from '../../components/Input.astro'
import SvgPlayground from '../../layouts/SvgPlayground.astro'
import ControlSection from '../../components/ControlSection.astro'
---

<SvgPlayground pageDescription="An SVG tool for generating downloadable abstract SVG forms" heading="Squaddle">
    <Fragment slot="controls">
        <ControlSection>
            <Slider id="shapes" min={2} max={1500} value={541} reset={500} name="Shapes" />
            <Slider id="rotation" min={0} max={720} value={361} reset={0} name="Rotation" />
        </ControlSection>

        <ControlSection class="grid grid-cols-2">
            <Slider id="x-stride" min={-1} max={1} value={0.1} reset={0} step={0.001} name="x - Stride" />
            <Slider id="y-stride" min={-1} max={1} value={0.2} reset={0} step={0.001} name="y - Stride" />
            <Slider id="x-amplitude" min={-1} max={1} value={0.3} reset={0} step={0.001} name="x - Amplitude" />
            <Slider id="y-amplitude" min={-1} max={1} value={-0.1} reset={0} step={0.001} name="y - Amplitude" />
            <Slider id="x-wobble-freq" min={0.1} max={2} value={0.59} step={0.01} name="x - Frequency" />
            <Slider id="y-wobble-freq" min={0.1} max={2} value={0.6} step={0.01} name="y - Frequency" />
            <Slider id="x-wobble-phase" min={0} max={Math.PI * 2} value={0} step={0.01} name="x - Phase" />
            <Slider id="y-wobble-phase" min={0} max={Math.PI * 2} value={0} step={0.01} name="y - Phase" />
        </ControlSection>

        <ControlSection class="grid grid-cols-2">
            <Slider id="radius-x" min={0} max={1} value={0.2} step={0.001} name="Radius X" />
            <Slider id="radius-y" min={0} max={1} value={0.3} step={0.001} name="Radius Y" />
            <Slider
                id="radius-wobble"
                min={-1}
                max={1}
                value={0}
                reset={0}
                step={0.001}
                name="Radius Wobble"
                class="col-span-2"
            />
            <Slider id="radius-freq" min={1} max={10} value={1} step={0.1} name="Radius Frequency" class="col-span-2" />
        </ControlSection>

        <ControlSection class="grid-cols-3">
            <Input type="color" id="fill-start" label="Fill Start" value="#000000" />
            <Input type="color" id="fill-mid" label="Fill Mid" value="#7300ff" />
            <Input type="color" id="fill-end" label="Fill End" value="#fbff00" />
            <Slider class="col-span-3" id="fill-alpha" min={0} max={1} step={0.01} value={1} name="Fill Alpha" />
        </ControlSection>

        <ControlSection class="grid-cols-3">
            <Input type="color" id="stroke-start" label="Stroke Start" value="#000000" />
            <Input type="color" id="stroke-mid" label="Stroke Mid" value="#0011ff" />
            <Input type="color" id="stroke-end" label="Stroke End" value="#ff0000" />
            <Slider class="col-span-3" id="stroke-alpha" min={0} max={1} step={0.01} value={1} name="Stroke Alpha" />
            <Slider class="col-span-3" id="stroke-width" min={0} max={1} step={0.001} value={0.1} name="Stroke Width" />
        </ControlSection>

        <ControlSection>
            <Slider id="bg-angle" min={0} max={360} value={360} name="Bg Angle" />
            <div class="grid grid-cols-2 md:grid-cols-2 sm:grid-cols-4 gap-4 sm:col-start-1 sm:col-end-3 md:col-end-1">
                <Input type="color" id="bg-start" label="Bg Start" value="#000000" />
                <Input type="color" id="bg-end" label="Bg End" value="#000000" />
            </div>
        </ControlSection>
    </Fragment>
</SvgPlayground>

<script>
    import { initInteractiveSvg, type Size, clear } from '../../svg/svg'
    import { drawEllipse } from '../../svg/ellipse'
    import { getInputValue } from '../../utils/controls'
    import { drawRect } from '../../svg/rect'
    import { createGradient } from '../../svg/gradient'
    import Color from 'colorjs.io'
    import { mix, toProofed } from '../../utils/color'
    import { stump } from '../../utils/form'

    const init = (svg: HTMLElement, size: Size) => {
        function get<T>(id: string): T {
            return getInputValue<T>(id, () => requestAnimationFrame(render))
        }

        function getScaled(id: string, max: number) {
            const value = getInputValue<number>(id, () => requestAnimationFrame(render))
            return value * max
        }

        const render = () => {
            clear(svg)

            const shapes = get<number>('shapes')
            const xStride = getScaled('x-stride', size.w / 100)
            const yStride = getScaled('y-stride', size.w / 100)
            const rotation = get<number>('rotation')

            const xAmplitude = getScaled('x-amplitude', size.w / 2)
            const xWobbleFreq = get<number>('x-wobble-freq')
            const xWobblePhase = get<number>('x-wobble-phase')
            const yAmplitude = getScaled('y-amplitude', size.h / 2)
            const yWobbleFreq = get<number>('y-wobble-freq')
            const yWobblePhase = get<number>('y-wobble-phase')

            const radiusX = getScaled('radius-x', size.w)
            const radiusY = getScaled('radius-y', size.w)
            const radiusWobble = getScaled('radius-wobble', size.w / 10)
            const radiusFreq = get<number>('radius-freq')

            const colorSpace = get<string>('color-space')
            const proof = get<string>('proof')
            const shouldProof = proof === 'proof'

            const fillStart = get<Color>('fill-start')
            const fillMid = get<Color>('fill-mid')
            const fillEnd = get<Color>('fill-end')
            const fillAlpha = get<number>('fill-alpha')

            const strokeWidth = getScaled('stroke-width', size.w / 100)
            const strokeStart = get<Color>('stroke-start')
            const strokeMid = get<Color>('stroke-mid')
            const strokeEnd = get<Color>('stroke-end')
            const strokeAlpha = get<number>('stroke-alpha')

            const bgAngle = get<number>('bg-angle')
            const bgStart = get<Color>('bg-start')
            const bgEnd = get<Color>('bg-end')

            const center = { x: size.w / 2, y: size.h / 2 }

            createGradient(svg, {
                id: 'bg-gradient',
                start: (shouldProof ? toProofed(bgStart) : bgStart.to('srgb')).toString({ format: 'hex' }),
                end: (shouldProof ? toProofed(bgEnd) : bgEnd.to('srgb')).toString({ format: 'hex' }),
                angle: bgAngle,
            })

            drawRect(svg, {
                x: 0,
                y: 0,
                width: size.w,
                height: size.h,
                fill: 'url(#bg-gradient)',
            })

            for (let i = 0; i <= shapes; i++) {
                const t = i / shapes
                const nt = (t - 0.5) * 2
                const pi_nt = nt * Math.PI * 2

                const fill = mix(fillStart, fillMid, fillEnd, t, colorSpace, 'srgb')
                const proofedFill = toProofed(fill)

                const stroke = mix(strokeStart, strokeMid, strokeEnd, t, colorSpace, 'srgb')
                const proofedStroke = toProofed(stroke)

                const xSineOffset = Math.sin(pi_nt * xWobbleFreq + xWobblePhase) * xAmplitude
                const ySineOffset = Math.sin(pi_nt * yWobbleFreq + yWobblePhase) * yAmplitude
                const xOffset = (i - shapes / 2) * xStride + xSineOffset
                const yOffset = (i - shapes / 2) * yStride + ySineOffset

                drawEllipse(svg, {
                    x: center.x + xOffset,
                    y: center.y + yOffset,
                    radiusX: (radiusX + Math.sin(pi_nt * radiusFreq) * radiusWobble) * stump(t),
                    radiusY: (radiusY + Math.sin(pi_nt * radiusFreq) * radiusWobble) * stump(t),
                    fill: (shouldProof ? proofedFill : fill).toString({ format: 'hex' }),
                    fillOpacity: fillAlpha,
                    stroke: (shouldProof ? proofedStroke : stroke).toString({ format: 'hex' }),
                    strokeOpacity: strokeAlpha,
                    strokeWidth: strokeWidth,
                    rotation: nt * rotation,
                })
            }
        }

        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
