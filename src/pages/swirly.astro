---
import Slider from '../components/Slider.astro'
import Input from '../components/Input.astro'
import Select from '../components/Select.astro'
import SvgPlayground from '../layouts/SvgPlayground.astro'
import ControlSection from '../components/ControlSection.astro'
---

<SvgPlayground pageDescription="An SVG tool for generating downloadable abstract SVG forms" heading="Swirly">
    <Fragment slot="controls">
        <ControlSection>
            <Slider id="stride" min={2} max={50} value={21} name="Stride" step={0.1} />
            <Slider id="rotation" min={0} max={720} value={56} name="Rotation" />
        </ControlSection>

        <ControlSection>
            <Slider id="radius-min" min={0} max={1000} value={7} name="Radius Min" />
            <Slider id="radius-x" min={0} max={1} value={0.68} step={0.01} name="Radius X" />
            <Slider id="radius-y" min={0} max={1} value={0.32} step={0.01} name="Radius Y" />
        </ControlSection>

        <ControlSection>
            <Slider id="freq" min={-5} max={5} value={0.5} step={0.1} name="Frequency" />
            <Slider id="offset-x" min={-500} max={500} value={170} name="Offset X" />
            <Slider id="offset-y" min={-500} max={500} value={-280} name="Offset Y" />
        </ControlSection>

        <ControlSection class="grid-cols-3">
            <Input type="color" id="fill-start" label="Fill Start" value="#ff0000" />
            <Input type="color" id="fill-mid" label="Fill Mid" value="#ff9500" />
            <Input type="color" id="fill-end" label="Fill End" value="#007bff" />
            <Slider class="col-span-3" id="fill-alpha" min={0} max={1} step={0.01} value={0.29} name="Fill Alpha" />
        </ControlSection>

        <ControlSection class="grid-cols-3">
            <Input type="color" id="stroke-start" label="Stroke Start" value="#000000" />
            <Input type="color" id="stroke-mid" label="Stroke Mid" value="#0091ff" />
            <Input type="color" id="stroke-end" label="Stroke End" value="#ff00ea" />
            <Slider class="col-span-3" id="stroke-alpha" min={0} max={1} step={0.01} value={0.44} name="Stroke Alpha" />
            <Slider class="col-span-3" id="stroke-width" min={0} max={10} step={0.1} value={1.5} name="Stroke Width" />
        </ControlSection>

        <ControlSection>
            <Slider id="bg-angle" min={0} max={360} value={0} name="Bg Angle" />
            <div class="grid grid-cols-2 md:grid-cols-2 sm:grid-cols-4 gap-4 sm:col-start-1 sm:col-end-3 md:col-end-1">
                <Input type="color" id="bg-start" label="Bg Start" value="#000000" />
                <Input type="color" id="bg-end" label="Bg End" value="#000000" />
            </div>
        </ControlSection>

        <ControlSection>
            <Select id="color-space" label="Color Space" class="col-span-3">
                <option value="lch" selected>LCH</option>
                <option value="acescc">ACEScc</option>
                <option value="a98rgb">Adobe 98 RGB</option>
                <option value="hpluv">HPLuv</option>
                <option value="hsl">HSL</option>
                <option value="hsluv">HSLuv</option>
                <option value="hwb">HWB</option>
                <option value="ictcp">ICTCQ</option>
                <option value="jzczhz">JzCzHz</option>
                <option value="lab">LAB</option>
                <option value="oklch">Oklch</option>
                <option value="p3">P3</option>
                <option value="prophoto">ProPhoto</option>
                <option value="rec2020">REC.2020</option>
                <option value="rec2100hlg">REC.2100-HLG</option>
                <option value="rec2100pq">REC.2100-PQ</option>
            </Select>
        </ControlSection>
    </Fragment>
</SvgPlayground>

<script>
    import { initInteractiveSvg, type Size, clear } from '../svg/svg'
    import { drawEllipse } from '../svg/ellipse'
    import { getInputValue } from '../utils/controls'
    import { drawRect } from '../svg/rect'
    import { createGradient } from '../svg/gradient'
    import Color from 'colorjs.io'
    import { mix, toProofed } from '../utils/color'

    const init = (svg: HTMLElement, size: Size) => {
        function get<T>(id: string) {
            return getInputValue<T>(id, () => requestAnimationFrame(render))
        }

        const render = () => {
            clear(svg)

            const radiusMin = get<number>('radius-min')
            const radiusX = get<number>('radius-x')
            const radiusY = get<number>('radius-y')
            const freq = get<number>('freq')
            const offsetX = get<number>('offset-x')
            const offsetY = get<number>('offset-y')
            const rotation = get<number>('rotation')
            const stride = get<number>('stride')

            const fillStart = get<Color>('fill-start')
            const fillMid = get<Color>('fill-mid')
            const fillEnd = get<Color>('fill-end')
            const fillAlpha = get<number>('fill-alpha')

            const strokeWidth = get<number>('stroke-width')
            const strokeStart = get<Color>('stroke-start')
            const strokeMid = get<Color>('stroke-mid')
            const strokeEnd = get<Color>('stroke-end')
            const strokeAlpha = get<number>('stroke-alpha')

            const colorSpace = get<string>('color-space')
            const proof = get<string>('proof')
            const shouldProof = proof === 'proof'

            const bgAngle = get<number>('bg-angle')
            const bgStart = get<Color>('bg-start')
            const bgEnd = get<Color>('bg-end')

            const steps = (size.h + radiusY) / stride
            const center = { x: size.w / 2, y: size.h / 2 }

            createGradient(svg, {
                id: 'bg-gradient',
                colors: [shouldProof ? toProofed(bgStart) : bgStart, shouldProof ? toProofed(bgEnd) : bgEnd],
                stops: 10,
                angle: bgAngle,
            })

            drawRect(svg, {
                x: 0,
                y: 0,
                width: size.w,
                height: size.h,
                fill: 'url(#bg-gradient)',
            })

            for (let i = 0; i < steps; i++) {
                const t = i / steps
                const pi_t = t * Math.PI * 2 * freq

                const fill = mix(fillStart, fillMid, fillEnd, t, colorSpace, 'srgb')
                const proofedFill = toProofed(fill)

                const stroke = mix(strokeStart, strokeMid, strokeEnd, t, colorSpace, 'srgb')
                const proofedStroke = toProofed(stroke)

                const r = (1 - t) * size.h + 10

                drawEllipse(svg, {
                    x: center.x + Math.sin(pi_t) * offsetX,
                    y: center.y + Math.cos(pi_t) * offsetY,
                    radiusX: radiusMin + r * radiusX,
                    radiusY: radiusMin + r * radiusY,
                    fill: (shouldProof ? proofedFill : fill).toString({ format: 'hex', precision: 0 }),
                    fillOpacity: fillAlpha,
                    stroke: (shouldProof ? proofedStroke : stroke).toString({ format: 'hex', precision: 0 }),
                    strokeOpacity: strokeAlpha,
                    strokeWidth: strokeWidth,
                    rotation: (t - 0.5) * rotation,
                })
            }
        }

        render()
    }

    initInteractiveSvg({
        init,
    })
</script>
